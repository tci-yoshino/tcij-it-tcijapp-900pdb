Option Explicit On
Option Infer Off
Option Strict On

Imports System.Text
Imports System.Data.SqlClient
Imports System.Text.RegularExpressions
Imports Purchase.TCIDataAccess.DBCommon

Namespace TCIDataAccess

    ''' <summary> 
    ''' PurchasingUser データクラス 
    ''' </summary> 
    ''' <remarks>
    ''' <para>Generated by データクラス自動生成ツール Ver 4.1</para>
    ''' </remarks>
    Public Class PurchasingUser


#Region "User-Defined Constant"

#End Region 'User-Defined Constant End

        Protected _UserID As Integer = 0
        Protected _RoleCode As String = String.Empty
        Protected _PrivilegeLevel As String = String.Empty
        Protected _R3PurchasingGroup As String = String.Empty
        Protected _isAdmin As Boolean = False
        Protected _isDisabled As Boolean = False
        Protected _CreatedBy As Integer = 0
        Protected _CreateDate As DateTime = New DateTime(0)
        Protected _UpdatedBy As Integer = 0
        Protected _UpdateDate As DateTime = New DateTime(0)
        Protected _RFQCorrespondenceEditable As Boolean = False
        Protected _MMSTAInvalidationEditable As Boolean = False

        ''' <summary> 
        ''' UserID を設定、または取得する 
        ''' </summary> 
        Public Property UserID() As Integer
            Get
                Return _UserID
            End Get
            Set(ByVal value As Integer)
                _UserID = value
            End Set
        End Property

        ''' <summary> 
        ''' RoleCode を設定、または取得する 
        ''' </summary> 
        Public Property RoleCode() As String
            Get
                Return _RoleCode
            End Get
            Set(ByVal value As String)
                _RoleCode = value
            End Set
        End Property

        ''' <summary> 
        ''' PrivilegeLevel を設定、または取得する 
        ''' </summary> 
        Public Property PrivilegeLevel() As String
            Get
                Return _PrivilegeLevel
            End Get
            Set(ByVal value As String)
                _PrivilegeLevel = value
            End Set
        End Property

        ''' <summary> 
        ''' R3PurchasingGroup を設定、または取得する 
        ''' </summary> 
        Public Property R3PurchasingGroup() As String
            Get
                Return _R3PurchasingGroup
            End Get
            Set(ByVal value As String)
                _R3PurchasingGroup = value
            End Set
        End Property

        ''' <summary> 
        ''' isAdmin を設定、または取得する 
        ''' </summary> 
        Public Property isAdmin() As Boolean
            Get
                Return _isAdmin
            End Get
            Set(ByVal value As Boolean)
                _isAdmin = value
            End Set
        End Property

        ''' <summary> 
        ''' isDisabled を設定、または取得する 
        ''' </summary> 
        Public Property isDisabled() As Boolean
            Get
                Return _isDisabled
            End Get
            Set(ByVal value As Boolean)
                _isDisabled = value
            End Set
        End Property

        ''' <summary> 
        ''' CreatedBy を設定、または取得する 
        ''' </summary> 
        Public Property CreatedBy() As Integer
            Get
                Return _CreatedBy
            End Get
            Set(ByVal value As Integer)
                _CreatedBy = value
            End Set
        End Property

        ''' <summary> 
        ''' CreateDate を設定、または取得する 
        ''' </summary> 
        Public Property CreateDate() As DateTime
            Get
                Return _CreateDate
            End Get
            Set(ByVal value As DateTime)
                _CreateDate = value
            End Set
        End Property

        ''' <summary> 
        ''' UpdatedBy を設定、または取得する 
        ''' </summary> 
        Public Property UpdatedBy() As Integer
            Get
                Return _UpdatedBy
            End Get
            Set(ByVal value As Integer)
                _UpdatedBy = value
            End Set
        End Property

        ''' <summary> 
        ''' UpdateDate を設定、または取得する 
        ''' </summary> 
        Public Property UpdateDate() As DateTime
            Get
                Return _UpdateDate
            End Get
            Set(ByVal value As DateTime)
                _UpdateDate = value
            End Set
        End Property

        ''' <summary> 
        ''' RFQCorrespondenceEditable を設定、または取得する 
        ''' </summary> 
        Public Property RFQCorrespondenceEditable() As Boolean
            Get
                Return _RFQCorrespondenceEditable
            End Get
            Set(ByVal value As Boolean)
                _RFQCorrespondenceEditable = value
            End Set
        End Property

        ''' <summary> 
        ''' MMSTAInvalidationEditable を設定、または取得する 
        ''' </summary> 
        Public Property MMSTAInvalidationEditable() As Boolean
            Get
                Return _MMSTAInvalidationEditable
            End Get
            Set(ByVal value As Boolean)
                _MMSTAInvalidationEditable = value
            End Set
        End Property

        ''' <summary> 
        ''' コンストラクタ
        ''' </summary> 
        Public Sub New()

        End Sub

        ''' <summary>
        ''' データベースからデータを読み込む。
        ''' </summary>
        ''' <param name="UserID">UserID</param>
        Public Sub Load(ByVal UserID As Integer)

            'データベースからデータを読み込む SQL 文字列を生成する。
            Dim Value As New StringBuilder()
            Value.AppendLine("SELECT")
            Value.AppendLine("    [UserID],")
            Value.AppendLine("    [RoleCode],")
            Value.AppendLine("    [PrivilegeLevel],")
            Value.AppendLine("    [R3PurchasingGroup],")
            Value.AppendLine("    [isAdmin],")
            Value.AppendLine("    [isDisabled],")
            Value.AppendLine("    [CreatedBy],")
            Value.AppendLine("    [CreateDate],")
            Value.AppendLine("    [UpdatedBy],")
            Value.AppendLine("    [UpdateDate],")
            Value.AppendLine("    [RFQCorrespondenceEditable],")
            Value.AppendLine("    [MMSTAInvalidationEditable]")
            Value.AppendLine("FROM")
            Value.AppendLine("    [PurchasingUser]")
            Value.AppendLine("WHERE")
            Value.AppendLine("    [UserID] = @UserID")

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    DBCommand.CommandText = Value.ToString()
                    DBCommand.Parameters.AddWithValue("UserID", UserID)
                    DBConn.Open()
                    Dim DBReader As SqlDataReader = DBCommand.ExecuteReader()
                    While DBReader.Read()
                        SetProperty(DBReader("UserID"), _UserID)
                        SetProperty(DBReader("RoleCode"), _RoleCode)
                        SetProperty(DBReader("PrivilegeLevel"), _PrivilegeLevel)
                        SetProperty(DBReader("R3PurchasingGroup"), _R3PurchasingGroup)
                        SetProperty(DBReader("isAdmin"), _isAdmin)
                        SetProperty(DBReader("isDisabled"), _isDisabled)
                        SetProperty(DBReader("CreatedBy"), _CreatedBy)
                        SetProperty(DBReader("CreateDate"), _CreateDate)
                        SetProperty(DBReader("UpdatedBy"), _UpdatedBy)
                        SetProperty(DBReader("UpdateDate"), _UpdateDate)
                        SetProperty(DBReader("RFQCorrespondenceEditable"), _RFQCorrespondenceEditable)
                        SetProperty(DBReader("MMSTAInvalidationEditable"), _MMSTAInvalidationEditable)
                    End While
                    DBReader.Close()
                End Using
            End Using

        End Sub

        ''' <summary> 
        ''' データベースへデータを書き込む。
        ''' </summary> 
        ''' <returns>IDENTITY で自動的に挿入された ID 値。更新または IDENTITY 列が無い場合は 0 が返る。</returns> 
        Public Function Save() As Integer

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                DBConn.Open()
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    Dim i_Identity As Integer = Me.Save(DBCommand)
                    Return i_Identity
                End Using
            End Using

        End Function

        ''' <summary> 
        ''' データベースへデータを書き込む。(Facade 専用)
        ''' </summary> 
        ''' <param name="DBCommand">SqlCommand</param>
        ''' <returns>IDENTITY で自動的に挿入された ID 値。更新または IDENTITY 列が無い場合は 0 が返る。</returns> 
        Public Function Save(ByVal DBCommand As SqlCommand) As Integer

            Dim i_ID As Integer = 0
            DBCommand.CommandText = CreateSaveSQL()
            DBCommand.Parameters.Clear()
            DBCommand.Parameters.AddWithValue("UserID", _UserID)
            DBCommand.Parameters.AddWithValue("RoleCode", _RoleCode)
            DBCommand.Parameters.AddWithValue("PrivilegeLevel", _PrivilegeLevel)
            DBCommand.Parameters.AddWithValue("R3PurchasingGroup", ConvertEmptyStringToNull(_R3PurchasingGroup))
            DBCommand.Parameters.AddWithValue("isAdmin", _isAdmin)
            DBCommand.Parameters.AddWithValue("isDisabled", _isDisabled)
            DBCommand.Parameters.AddWithValue("CreatedBy", _CreatedBy)
            DBCommand.Parameters.AddWithValue("UpdatedBy", _UpdatedBy)
            DBCommand.Parameters.AddWithValue("RFQCorrespondenceEditable", _RFQCorrespondenceEditable)
            DBCommand.Parameters.AddWithValue("MMSTAInvalidationEditable", _MMSTAInvalidationEditable)
            Dim ob_ID As Object = DBCommand.ExecuteScalar()
            If Not IsDBNull(ob_ID) Then
                i_ID = CInt(ob_ID)
            End If
            Return i_ID

        End Function

        ''' <summary> 
        ''' データベースへデータを書き込む SQL 文字列を生成する。
        ''' </summary> 
        ''' <returns>生成した SQL 文字列</returns> 
        Private Function CreateSaveSQL() As String

            Dim Value As New StringBuilder()
            Value.AppendLine("IF(")
            Value.AppendLine("    SELECT")
            Value.AppendLine("        COUNT(*)")
            Value.AppendLine("    FROM")
            Value.AppendLine("        [PurchasingUser]")
            Value.AppendLine("    WHERE")
            Value.AppendLine("        [UserID] = @UserID")
            Value.AppendLine("    ) = 0")
            Value.AppendLine("        INSERT [PurchasingUser] (")
            Value.AppendLine("            [UserID],")
            Value.AppendLine("            [RoleCode],")
            Value.AppendLine("            [PrivilegeLevel],")
            Value.AppendLine("            [R3PurchasingGroup],")
            Value.AppendLine("            [isAdmin],")
            Value.AppendLine("            [isDisabled],")
            Value.AppendLine("            [CreatedBy],")
            Value.AppendLine("            [CreateDate],")
            Value.AppendLine("            [UpdatedBy],")
            Value.AppendLine("            [UpdateDate],")
            Value.AppendLine("            [RFQCorrespondenceEditable],")
            Value.AppendLine("            [MMSTAInvalidationEditable]")
            Value.AppendLine("        )")
            Value.AppendLine("        Values(")
            Value.AppendLine("            @UserID,")
            Value.AppendLine("            @RoleCode,")
            Value.AppendLine("            @PrivilegeLevel,")
            Value.AppendLine("            @R3PurchasingGroup,")
            Value.AppendLine("            @isAdmin,")
            Value.AppendLine("            @isDisabled,")
            Value.AppendLine("            @CreatedBy,")
            Value.AppendLine("            GETDATE(),")
            Value.AppendLine("            @UpdatedBy,")
            Value.AppendLine("            GETDATE(),")
            Value.AppendLine("            @RFQCorrespondenceEditable,")
            Value.AppendLine("            @MMSTAInvalidationEditable")
            Value.AppendLine("        )")
            Value.AppendLine("    ELSE")
            Value.AppendLine("        UPDATE")
            Value.AppendLine("            [PurchasingUser]")
            Value.AppendLine("        SET")
            Value.AppendLine("            [UserID] = @UserID,")
            Value.AppendLine("            [RoleCode] = @RoleCode,")
            Value.AppendLine("            [PrivilegeLevel] = @PrivilegeLevel,")
            Value.AppendLine("            [R3PurchasingGroup] = @R3PurchasingGroup,")
            Value.AppendLine("            [isAdmin] = @isAdmin,")
            Value.AppendLine("            [isDisabled] = @isDisabled,")
            Value.AppendLine("            [UpdatedBy] = @UpdatedBy,")
            Value.AppendLine("            [UpdateDate] = GETDATE(),")
            Value.AppendLine("            [RFQCorrespondenceEditable] = @RFQCorrespondenceEditable,")
            Value.AppendLine("            [MMSTAInvalidationEditable] = @MMSTAInvalidationEditable")
            Value.AppendLine("        WHERE ")
            Value.AppendLine("            [UserID] = @UserID")
            Value.AppendLine(";")
            Value.AppendLine("SELECT SCOPE_IDENTITY();")
            Return Value.ToString()

        End Function

        ''' <summary> 
        ''' データの存在チェックを行う。
        ''' </summary> 
        ''' <returns>存在する場合は True、しない場合は False を返す</returns> 
        ''' <param name="UserID">UserID</param>
        Public Shared Function IsExists(ByVal UserID As Integer) As Boolean

            ' データの存在チェックを行う SQL 文字列を生成する。
            Dim Value As New StringBuilder()
            Value.AppendLine("SELECT")
            Value.AppendLine("    COUNT(*)")
            Value.AppendLine("FROM")
            Value.AppendLine("    [PurchasingUser]")
            Value.AppendLine("WHERE")
            Value.AppendLine("    [UserID] = @UserID")

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    DBCommand.CommandText = Value.ToString()
                    DBCommand.Parameters.Clear()
                    DBCommand.Parameters.AddWithValue("UserID", UserID)
                    DBConn.Open()
                    Dim i_Count As Integer = Convert.ToInt32(DBCommand.ExecuteScalar())
                    Return i_Count > 0
                End Using
            End Using

        End Function

#Region "User-Defined Methods"

        ''' <summary> 
        ''' データベースへデータを書き込む。(Facade 専用)
        ''' </summary> 
        ''' <param name="DBCommand">SqlCommand</param>
        ''' <returns>IDENTITY で自動的に挿入された ID 値。更新または IDENTITY 列が無い場合は 0 が返る。</returns> 
        Public Function Save(ByVal DBCommand As SqlCommand, ByVal i_UserID As Integer, ByVal st_UpdatedBy As Integer, ByVal st_R3PurchasingGroup As String,
                             ByVal bl_RFQCorrespondenceEditable As Boolean, ByVal bl_MMSTAInvalidationEditable As Boolean) As Integer

            Dim i_ID As Integer = 0
            DBCommand.CommandText = CreateSaveForUserIDSQL()
            DBCommand.Parameters.Clear()
            DBCommand.Parameters.AddWithValue("UserID", i_UserID)
            DBCommand.Parameters.AddWithValue("R3PurchasingGroup", st_R3PurchasingGroup)
            DBCommand.Parameters.AddWithValue("UpdatedBy", st_UpdatedBy)
            DBCommand.Parameters.AddWithValue("RFQCorrespondenceEditable", bl_RFQCorrespondenceEditable)
            DBCommand.Parameters.AddWithValue("MMSTAInvalidationEditable", bl_MMSTAInvalidationEditable)
            Dim ob_ID As Object = DBCommand.ExecuteScalar()
            If Not IsDBNull(ob_ID) Then
                i_ID = CInt(ob_ID)
            End If
            Return i_ID

        End Function

        ''' <summary> 
        ''' データベースへデータを書き込む SQL 文字列を生成する。
        ''' </summary> 
        ''' <returns>生成した SQL 文字列</returns> 
        Private Function CreateSaveForUserIDSQL() As String

            Dim Value As New StringBuilder()
            Value.AppendLine("UPDATE")
            Value.AppendLine("    [PurchasingUser]")
            Value.AppendLine("SET")
            Value.AppendLine("    [R3PurchasingGroup] = @R3PurchasingGroup,")
            Value.AppendLine("    [UpdatedBy] = @UpdatedBy,")
            Value.AppendLine("    [UpdateDate] = GETDATE(),")
            Value.AppendLine("    [RFQCorrespondenceEditable] = @RFQCorrespondenceEditable,")
            Value.AppendLine("    [MMSTAInvalidationEditable] = @MMSTAInvalidationEditable")
            Value.AppendLine("WHERE ")
            Value.AppendLine("    [UserID] = @UserID")
            Return Value.ToString()

        End Function

        '''' <summary>
        '''' データベースのデータを削除する
        '''' </summary>
        '''' <param name="UserID">UserID</param>
        'Public Sub Delete(ByVal UserID As Integer)

        '    Using DBConn As New SqlConnection(DB_CONNECT_STRING)
        '        DBConn.Open()
        '        Using DBCommand As SqlCommand = DBConn.CreateCommand()
        '            Delete(DBCommand, UserID)
        '        End Using
        '    End Using

        'End Sub

        '''' <summary>
        '''' データベースのデータを削除する (Facade 専用)
        '''' </summary>
        '''' <param name="DBCommand">SqlCommand</param>
        '''' <param name="UserID">UserID</param>
        'Public Sub Delete(ByVal DBCommand As SqlCommand, _
        '                  ByVal UserID As Integer)

        '    'データベースのデータを削除する SQL 文字列を生成する
        '    Dim Value As New StringBuilder()
        '    Value.AppendLine("DELETE FROM [PurchasingUser]")
        '    Value.AppendLine("WHERE")
        '    Value.AppendLine("    [UserID] = @UserID")

        '    DBCommand.CommandText = Value.ToString()
        '    DBCommand.Parameters.Clear()
        '    DBCommand.Parameters.AddWithValue("UserID", UserID)
        '    DBCommand.ExecuteNonQuery()

        'End Sub

#End Region 'User-Defined Methods End

    End Class

    ''' <summary> 
    ''' PurchasingUser リストクラス 
    ''' </summary> 
    Public Class PurchasingUserList
        Inherits List(Of PurchasingUser)

#Region "User-Defined Constant of List"

#End Region 'User-Defined Constant of List End

        ''' <summary>
        ''' コンストラクタ
        ''' </summary>
        Public Sub New()

        End Sub

#Region "User-Defined Methods of List"

        '''' <summary>
        '''' データベースから全てのデータを読み込む
        '''' </summary>
        'Public Sub Load()

        '    'データベースから全てのデータを読み込む SQL 文字列を生成する
        '    Dim Value As New StringBuilder()
        '    Value.AppendLine("SELECT")
        '    Value.AppendLine("    [UserID],")
        '    Value.AppendLine("    [RoleCode],")
        '    Value.AppendLine("    [PrivilegeLevel],")
        '    Value.AppendLine("    [R3PurchasingGroup],")
        '    Value.AppendLine("    [isAdmin],")
        '    Value.AppendLine("    [isDisabled],")
        '    Value.AppendLine("    [CreatedBy],")
        '    Value.AppendLine("    [CreateDate],")
        '    Value.AppendLine("    [UpdatedBy],")
        '    Value.AppendLine("    [UpdateDate],")
        '    Value.AppendLine("    [RFQCorrespondenceEditable],")
        '    Value.AppendLine("    [MMSTAInvalidationEditable]")
        '    Value.AppendLine("FROM")
        '    Value.AppendLine("    [PurchasingUser]")

        '    Using DBConn As New SqlConnection(DB_CONNECT_STRING)
        '        Using DBCommand As SqlCommand = DBConn.CreateCommand()
        '            DBCommand.CommandText = Value.ToString()
        '            DBConn.Open()
        '            Dim DBReader As SqlDataReader = DBCommand.ExecuteReader()
        '            While DBReader.Read()
        '                Dim dc_PurchasingUser As New PurchasingUser()
        '                SetProperty(DBReader("UserID"), dc_PurchasingUser.UserID)
        '                SetProperty(DBReader("RoleCode"), dc_PurchasingUser.RoleCode)
        '                SetProperty(DBReader("PrivilegeLevel"), dc_PurchasingUser.PrivilegeLevel)
        '                SetProperty(DBReader("R3PurchasingGroup"), dc_PurchasingUser.R3PurchasingGroup)
        '                SetProperty(DBReader("isAdmin"), dc_PurchasingUser.isAdmin)
        '                SetProperty(DBReader("isDisabled"), dc_PurchasingUser.isDisabled)
        '                SetProperty(DBReader("CreatedBy"), dc_PurchasingUser.CreatedBy)
        '                SetProperty(DBReader("CreateDate"), dc_PurchasingUser.CreateDate)
        '                SetProperty(DBReader("UpdatedBy"), dc_PurchasingUser.UpdatedBy)
        '                SetProperty(DBReader("UpdateDate"), dc_PurchasingUser.UpdateDate)
        '                SetProperty(DBReader("RFQCorrespondenceEditable"), dc_PurchasingUser.RFQCorrespondenceEditable)
        '                SetProperty(DBReader("MMSTAInvalidationEditable"), dc_PurchasingUser.MMSTAInvalidationEditable)
        '                Me.Add(dc_PurchasingUser)
        '            End While
        '            DBReader.Close()
        '        End Using
        '    End Using

        'End Sub

#End Region 'User-Defined Methods of List End

    End Class

End Namespace
