Option Explicit On
Option Infer Off
Option Strict On

Imports System.Text
Imports System.Data.SqlClient
Imports System.Text.RegularExpressions
Imports Purchase.TCIDataAccess.DBCommon

Namespace TCIDataAccess

    ''' <summary> 
    ''' Product データクラス 
    ''' </summary> 
    ''' <remarks>
    ''' <para>Generated by データクラス自動生成ツール Ver 4.1</para>
    ''' </remarks>
    Public Class Product


#Region "User-Defined Constant"

#End Region 'User-Defined Constant End

        Protected _ProductID As Integer = 0
        Protected _ProductNumber As String = String.Empty
        Protected _NumberType As String = String.Empty
        Protected _Name As String = String.Empty
        Protected _QuoName As String = String.Empty
        Protected _JapaneseName As String = String.Empty
        Protected _ChineseName As String = String.Empty
        Protected _CASNumber As String = String.Empty
        Protected _MolecularFormula As String = String.Empty
        Protected _Status As String = String.Empty
        Protected _ProposalDept As String = String.Empty
        Protected _ProcumentDept As String = String.Empty
        Protected _PD As String = String.Empty
        Protected _Reference As String = String.Empty
        Protected _Comment As String = String.Empty
        Protected _CreatedBy As Integer = 0
        Protected _CreateDate As DateTime = New DateTime(0)
        Protected _UpdatedBy As Integer = 0
        Protected _UpdateDate As DateTime = New DateTime(0)
        Protected _ProductWarning As String = String.Empty
        Protected _BUoM As String = String.Empty

        ''' <summary> 
        ''' ProductID を設定、または取得する 
        ''' </summary> 
        Public Property ProductID() As Integer
            Get
                Return _ProductID
            End Get
            Set(ByVal value As Integer)
                _ProductID = value
            End Set
        End Property

        ''' <summary> 
        ''' ProductNumber を設定、または取得する 
        ''' </summary> 
        Public Property ProductNumber() As String
            Get
                Return _ProductNumber
            End Get
            Set(ByVal value As String)
                _ProductNumber = value
            End Set
        End Property

        ''' <summary> 
        ''' NumberType を設定、または取得する 
        ''' </summary> 
        Public Property NumberType() As String
            Get
                Return _NumberType
            End Get
            Set(ByVal value As String)
                _NumberType = value
            End Set
        End Property

        ''' <summary> 
        ''' Name を設定、または取得する 
        ''' </summary> 
        Public Property Name() As String
            Get
                Return _Name
            End Get
            Set(ByVal value As String)
                _Name = value
            End Set
        End Property

        ''' <summary> 
        ''' QuoName を設定、または取得する 
        ''' </summary> 
        Public Property QuoName() As String
            Get
                Return _QuoName
            End Get
            Set(ByVal value As String)
                _QuoName = value
            End Set
        End Property

        ''' <summary> 
        ''' JapaneseName を設定、または取得する 
        ''' </summary> 
        Public Property JapaneseName() As String
            Get
                Return _JapaneseName
            End Get
            Set(ByVal value As String)
                _JapaneseName = value
            End Set
        End Property

        ''' <summary> 
        ''' ChineseName を設定、または取得する 
        ''' </summary> 
        Public Property ChineseName() As String
            Get
                Return _ChineseName
            End Get
            Set(ByVal value As String)
                _ChineseName = value
            End Set
        End Property

        ''' <summary> 
        ''' CASNumber を設定、または取得する 
        ''' </summary> 
        Public Property CASNumber() As String
            Get
                Return _CASNumber
            End Get
            Set(ByVal value As String)
                _CASNumber = value
            End Set
        End Property

        ''' <summary> 
        ''' MolecularFormula を設定、または取得する 
        ''' </summary> 
        Public Property MolecularFormula() As String
            Get
                Return _MolecularFormula
            End Get
            Set(ByVal value As String)
                _MolecularFormula = value
            End Set
        End Property

        ''' <summary> 
        ''' Status を設定、または取得する 
        ''' </summary> 
        Public Property Status() As String
            Get
                Return _Status
            End Get
            Set(ByVal value As String)
                _Status = value
            End Set
        End Property

        ''' <summary> 
        ''' ProposalDept を設定、または取得する 
        ''' </summary> 
        Public Property ProposalDept() As String
            Get
                Return _ProposalDept
            End Get
            Set(ByVal value As String)
                _ProposalDept = value
            End Set
        End Property

        ''' <summary> 
        ''' ProcumentDept を設定、または取得する 
        ''' </summary> 
        Public Property ProcumentDept() As String
            Get
                Return _ProcumentDept
            End Get
            Set(ByVal value As String)
                _ProcumentDept = value
            End Set
        End Property

        ''' <summary> 
        ''' PD を設定、または取得する 
        ''' </summary> 
        Public Property PD() As String
            Get
                Return _PD
            End Get
            Set(ByVal value As String)
                _PD = value
            End Set
        End Property

        ''' <summary> 
        ''' Reference を設定、または取得する 
        ''' </summary> 
        Public Property Reference() As String
            Get
                Return _Reference
            End Get
            Set(ByVal value As String)
                _Reference = value
            End Set
        End Property

        ''' <summary> 
        ''' Comment を設定、または取得する 
        ''' </summary> 
        Public Property Comment() As String
            Get
                Return _Comment
            End Get
            Set(ByVal value As String)
                _Comment = value
            End Set
        End Property

        ''' <summary> 
        ''' CreatedBy を設定、または取得する 
        ''' </summary> 
        Public Property CreatedBy() As Integer
            Get
                Return _CreatedBy
            End Get
            Set(ByVal value As Integer)
                _CreatedBy = value
            End Set
        End Property

        ''' <summary> 
        ''' CreateDate を設定、または取得する 
        ''' </summary> 
        Public Property CreateDate() As DateTime
            Get
                Return _CreateDate
            End Get
            Set(ByVal value As DateTime)
                _CreateDate = value
            End Set
        End Property

        ''' <summary> 
        ''' UpdatedBy を設定、または取得する 
        ''' </summary> 
        Public Property UpdatedBy() As Integer
            Get
                Return _UpdatedBy
            End Get
            Set(ByVal value As Integer)
                _UpdatedBy = value
            End Set
        End Property

        ''' <summary> 
        ''' UpdateDate を設定、または取得する 
        ''' </summary> 
        Public Property UpdateDate() As DateTime
            Get
                Return _UpdateDate
            End Get
            Set(ByVal value As DateTime)
                _UpdateDate = value
            End Set
        End Property

        ''' <summary> 
        ''' ProductWarning を設定、または取得する 
        ''' </summary> 
        Public Property ProductWarning() As String
            Get
                Return _ProductWarning
            End Get
            Set(ByVal value As String)
                _ProductWarning = value
            End Set
        End Property

        ''' <summary> 
        ''' BUoM を設定、または取得する 
        ''' </summary> 
        Public Property BUoM() As String
            Get
                Return _BUoM
            End Get
            Set(ByVal value As String)
                _BUoM = value
            End Set
        End Property

        ''' <summary> 
        ''' コンストラクタ
        ''' </summary> 
        Public Sub New()

        End Sub

        ''' <summary>
        ''' データベースからデータを読み込む。
        ''' </summary>
        ''' <param name="ProductID">ProductID</param>
        Public Sub Load(ByVal ProductID As Integer)

            'データベースからデータを読み込む SQL 文字列を生成する。
            Dim Value As New StringBuilder()
            Value.AppendLine("SELECT")
            Value.AppendLine("    [ProductID],")
            Value.AppendLine("    [ProductNumber],")
            Value.AppendLine("    [NumberType],")
            Value.AppendLine("    [Name],")
            Value.AppendLine("    [QuoName],")
            Value.AppendLine("    [JapaneseName],")
            Value.AppendLine("    [ChineseName],")
            Value.AppendLine("    [CASNumber],")
            Value.AppendLine("    [MolecularFormula],")
            Value.AppendLine("    [Status],")
            Value.AppendLine("    [ProposalDept],")
            Value.AppendLine("    [ProcumentDept],")
            Value.AppendLine("    [PD],")
            Value.AppendLine("    [Reference],")
            Value.AppendLine("    [Comment],")
            Value.AppendLine("    [CreatedBy],")
            Value.AppendLine("    [CreateDate],")
            Value.AppendLine("    [UpdatedBy],")
            Value.AppendLine("    [UpdateDate],")
            Value.AppendLine("    [ProductWarning],")
            Value.AppendLine("    [BUoM]")
            Value.AppendLine("FROM")
            Value.AppendLine("    [Product]")
            Value.AppendLine("WHERE")
            Value.AppendLine("    [ProductID] = @ProductID")

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    DBCommand.CommandText = Value.ToString()
                    DBCommand.Parameters.AddWithValue("ProductID", ProductID)
                    DBConn.Open()
                    Dim DBReader As SqlDataReader = DBCommand.ExecuteReader()
                    While DBReader.Read()
                        SetProperty(DBReader("ProductID"), _ProductID)
                        SetProperty(DBReader("ProductNumber"), _ProductNumber)
                        SetProperty(DBReader("NumberType"), _NumberType)
                        SetProperty(DBReader("Name"), _Name)
                        SetProperty(DBReader("QuoName"), _QuoName)
                        SetProperty(DBReader("JapaneseName"), _JapaneseName)
                        SetProperty(DBReader("ChineseName"), _ChineseName)
                        SetProperty(DBReader("CASNumber"), _CASNumber)
                        SetProperty(DBReader("MolecularFormula"), _MolecularFormula)
                        SetProperty(DBReader("Status"), _Status)
                        SetProperty(DBReader("ProposalDept"), _ProposalDept)
                        SetProperty(DBReader("ProcumentDept"), _ProcumentDept)
                        SetProperty(DBReader("PD"), _PD)
                        SetProperty(DBReader("Reference"), _Reference)
                        SetProperty(DBReader("Comment"), _Comment)
                        SetProperty(DBReader("CreatedBy"), _CreatedBy)
                        SetProperty(DBReader("CreateDate"), _CreateDate)
                        SetProperty(DBReader("UpdatedBy"), _UpdatedBy)
                        SetProperty(DBReader("UpdateDate"), _UpdateDate)
                        SetProperty(DBReader("ProductWarning"), _ProductWarning)
                        SetProperty(DBReader("BUoM"), _BUoM)
                    End While
                    DBReader.Close()
                End Using
            End Using

        End Sub

        ''' <summary> 
        ''' データベースへデータを書き込む。
        ''' </summary> 
        ''' <returns>IDENTITY で自動的に挿入された ID 値。更新または IDENTITY 列が無い場合は 0 が返る。</returns> 
        Public Function Save() As Integer

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                DBConn.Open()
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    Dim i_Identity As Integer = Me.Save(DBCommand)
                    Return i_Identity
                End Using
            End Using

        End Function

        ''' <summary> 
        ''' データベースへデータを書き込む。(Facade 専用)
        ''' </summary> 
        ''' <param name="DBCommand">SqlCommand</param>
        ''' <returns>IDENTITY で自動的に挿入された ID 値。更新または IDENTITY 列が無い場合は 0 が返る。</returns> 
        Public Function Save(ByVal DBCommand As SqlCommand) As Integer

            Dim i_ID As Integer = 0
            DBCommand.CommandText = CreateSaveSQL()
            DBCommand.Parameters.Clear()
            DBCommand.Parameters.AddWithValue("ProductID", _ProductID)
            DBCommand.Parameters.AddWithValue("ProductNumber", _ProductNumber)
            DBCommand.Parameters.AddWithValue("NumberType", _NumberType)
            DBCommand.Parameters.AddWithValue("Name", ConvertEmptyStringToNull(_Name))
            DBCommand.Parameters.AddWithValue("QuoName", ConvertEmptyStringToNull(_QuoName))
            DBCommand.Parameters.AddWithValue("JapaneseName", ConvertEmptyStringToNull(_JapaneseName))
            DBCommand.Parameters.AddWithValue("ChineseName", ConvertEmptyStringToNull(_ChineseName))
            DBCommand.Parameters.AddWithValue("CASNumber", ConvertEmptyStringToNull(_CASNumber))
            DBCommand.Parameters.AddWithValue("MolecularFormula", ConvertEmptyStringToNull(_MolecularFormula))
            DBCommand.Parameters.AddWithValue("Status", ConvertEmptyStringToNull(_Status))
            DBCommand.Parameters.AddWithValue("ProposalDept", ConvertEmptyStringToNull(_ProposalDept))
            DBCommand.Parameters.AddWithValue("ProcumentDept", ConvertEmptyStringToNull(_ProcumentDept))
            DBCommand.Parameters.AddWithValue("PD", ConvertEmptyStringToNull(_PD))
            DBCommand.Parameters.AddWithValue("Reference", ConvertEmptyStringToNull(_Reference))
            DBCommand.Parameters.AddWithValue("Comment", ConvertEmptyStringToNull(_Comment))
            DBCommand.Parameters.AddWithValue("CreatedBy", _CreatedBy)
            DBCommand.Parameters.AddWithValue("UpdatedBy", _UpdatedBy)
            DBCommand.Parameters.AddWithValue("ProductWarning", ConvertEmptyStringToNull(_ProductWarning))
            DBCommand.Parameters.AddWithValue("BUoM", ConvertEmptyStringToNull(_BUoM))
            Dim ob_ID As Object = DBCommand.ExecuteScalar()
            If Not IsDBNull(ob_ID) Then
                i_ID = CInt(ob_ID)
            End If
            Return i_ID

        End Function

        ''' <summary> 
        ''' データベースへデータを書き込む SQL 文字列を生成する。
        ''' </summary> 
        ''' <returns>生成した SQL 文字列</returns> 
        Private Function CreateSaveSQL() As String

            Dim Value As New StringBuilder()
            Value.AppendLine("IF(")
            Value.AppendLine("    SELECT")
            Value.AppendLine("        COUNT(*)")
            Value.AppendLine("    FROM")
            Value.AppendLine("        [Product]")
            Value.AppendLine("    WHERE")
            Value.AppendLine("        [ProductID] = @ProductID")
            Value.AppendLine("    ) = 0")
            Value.AppendLine("        INSERT [Product] (")
            Value.AppendLine("            [ProductNumber],")
            Value.AppendLine("            [NumberType],")
            Value.AppendLine("            [Name],")
            Value.AppendLine("            [QuoName],")
            Value.AppendLine("            [JapaneseName],")
            Value.AppendLine("            [ChineseName],")
            Value.AppendLine("            [CASNumber],")
            Value.AppendLine("            [MolecularFormula],")
            Value.AppendLine("            [Status],")
            Value.AppendLine("            [ProposalDept],")
            Value.AppendLine("            [ProcumentDept],")
            Value.AppendLine("            [PD],")
            Value.AppendLine("            [Reference],")
            Value.AppendLine("            [Comment],")
            Value.AppendLine("            [CreatedBy],")
            Value.AppendLine("            [CreateDate],")
            Value.AppendLine("            [UpdatedBy],")
            Value.AppendLine("            [UpdateDate],")
            Value.AppendLine("            [ProductWarning],")
            Value.AppendLine("            [BUoM]")
            Value.AppendLine("        )")
            Value.AppendLine("        Values(")
            Value.AppendLine("            @ProductNumber,")
            Value.AppendLine("            @NumberType,")
            Value.AppendLine("            @Name,")
            Value.AppendLine("            @QuoName,")
            Value.AppendLine("            @JapaneseName,")
            Value.AppendLine("            @ChineseName,")
            Value.AppendLine("            @CASNumber,")
            Value.AppendLine("            @MolecularFormula,")
            Value.AppendLine("            @Status,")
            Value.AppendLine("            @ProposalDept,")
            Value.AppendLine("            @ProcumentDept,")
            Value.AppendLine("            @PD,")
            Value.AppendLine("            @Reference,")
            Value.AppendLine("            @Comment,")
            Value.AppendLine("            @CreatedBy,")
            Value.AppendLine("            GETDATE(),")
            Value.AppendLine("            @UpdatedBy,")
            Value.AppendLine("            GETDATE(),")
            Value.AppendLine("            @ProductWarning,")
            Value.AppendLine("            @BUoM")
            Value.AppendLine("        )")
            Value.AppendLine("    ELSE")
            Value.AppendLine("        UPDATE")
            Value.AppendLine("            [Product]")
            Value.AppendLine("        SET")
            Value.AppendLine("            [ProductNumber] = @ProductNumber,")
            Value.AppendLine("            [NumberType] = @NumberType,")
            Value.AppendLine("            [Name] = @Name,")
            Value.AppendLine("            [QuoName] = @QuoName,")
            Value.AppendLine("            [JapaneseName] = @JapaneseName,")
            Value.AppendLine("            [ChineseName] = @ChineseName,")
            Value.AppendLine("            [CASNumber] = @CASNumber,")
            Value.AppendLine("            [MolecularFormula] = @MolecularFormula,")
            Value.AppendLine("            [Status] = @Status,")
            Value.AppendLine("            [ProposalDept] = @ProposalDept,")
            Value.AppendLine("            [ProcumentDept] = @ProcumentDept,")
            Value.AppendLine("            [PD] = @PD,")
            Value.AppendLine("            [Reference] = @Reference,")
            Value.AppendLine("            [Comment] = @Comment,")
            Value.AppendLine("            [UpdatedBy] = @UpdatedBy,")
            Value.AppendLine("            [UpdateDate] = GETDATE(),")
            Value.AppendLine("            [ProductWarning] = @ProductWarning,")
            Value.AppendLine("            [BUoM] = @BUoM")
            Value.AppendLine("        WHERE ")
            Value.AppendLine("            [ProductID] = @ProductID")
            Value.AppendLine(";")
            Value.AppendLine("SELECT SCOPE_IDENTITY();")
            Return Value.ToString()

        End Function

        ''' <summary> 
        ''' データの存在チェックを行う。
        ''' </summary> 
        ''' <returns>存在する場合は True、しない場合は False を返す</returns> 
        ''' <param name="ProductID">ProductID</param>
        Public Shared Function IsExists(ByVal ProductID As Integer) As Boolean

            ' データの存在チェックを行う SQL 文字列を生成する。
            Dim Value As New StringBuilder()
            Value.AppendLine("SELECT")
            Value.AppendLine("    COUNT(*)")
            Value.AppendLine("FROM")
            Value.AppendLine("    [Product]")
            Value.AppendLine("WHERE")
            Value.AppendLine("    [ProductID] = @ProductID")

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    DBCommand.CommandText = Value.ToString()
                    DBCommand.Parameters.Clear()
                    DBCommand.Parameters.AddWithValue("ProductID", ProductID)
                    DBConn.Open()
                    Dim i_Count As Integer = Convert.ToInt32(DBCommand.ExecuteScalar())
                    Return i_Count > 0
                End Using
            End Using

        End Function

#Region "User-Defined Methods"

        Public Function GetProductInfo(ByVal st_ProductNumber As String, ByVal st_RoleCode As String) As List(Of TCIDataAccess.Join.RFQIssueDispProductInfo)
            Dim productInfoList As List(Of TCIDataAccess.Join.RFQIssueDispProductInfo) = New List(Of TCIDataAccess.Join.RFQIssueDispProductInfo)

            'データベースからデータを読み込む SQL 文字列を生成する。
            Dim sb_SQL As New StringBuilder()
            sb_SQL.AppendLine("SELECT ")
            sb_SQL.AppendLine("  P.[ProductID], ")
            sb_SQL.AppendLine("  P.[ProductNumber], ")
            sb_SQL.AppendLine("  ISNULL(P.[QuoName], P.[Name]) AS ProductName, ")
            sb_SQL.AppendLine("  P.[CASNumber] ")
            sb_SQL.AppendLine("FROM ")
            sb_SQL.AppendLine("  [Product] AS P ")
            sb_SQL.AppendLine("WHERE ")
            sb_SQL.AppendLine("  P.[ProductNumber] = @ProductNumber")

            '権限ロールに従い極秘品を除外する
            If Common.CheckSessionRole(st_RoleCode) = False Then
                sb_SQL.AppendLine("  And ")
                sb_SQL.AppendLine("Not EXISTS (")
                sb_SQL.AppendLine("    SELECT 1")
                sb_SQL.AppendLine("    FROM")
                sb_SQL.AppendLine("      [v_CONFIDENTIAL] As C")
                sb_SQL.AppendLine("    WHERE")
                sb_SQL.AppendLine("      C.[isCONFIDENTIAL] = 1 AND ")
                sb_SQL.AppendLine("      C.[ProductID] = T.[ProductID]")
                sb_SQL.AppendLine(")")
            End If

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    DBCommand.CommandText = sb_SQL.ToString()
                    DBCommand.Parameters.AddWithValue("ProductNumber", st_ProductNumber)
                    DBConn.Open()
                    Dim DBReader As SqlDataReader = DBCommand.ExecuteReader()

                    While DBReader.Read()

                        Dim dc_Productinfo As TCIDataAccess.join.RFQIssueDispProductInfo = New TCIDataAccess.join.RFQIssueDispProductInfo

                        SetProperty(DBReader("ProductID"), dc_Productinfo.ProductID)
                        SetProperty(DBReader("ProductNumber"), dc_Productinfo.ProductNumber)
                        SetProperty(DBReader("ProductName"), dc_Productinfo.ProductName)
                        SetProperty(DBReader("CASNumber"), dc_Productinfo.CASNumber)
                        productInfoList.Add(dc_Productinfo)

                    End While

                    DBReader.Close()

                End Using
            End Using

            Return productInfoList

        End Function

        '''' <summary>
        '''' データベースのデータを削除する
        '''' </summary>
        '''' <param name="ProductID">ProductID</param>
        'Public Sub Delete(ByVal ProductID As Integer)

        '    Using DBConn As New SqlConnection(DB_CONNECT_STRING)
        '        DBConn.Open()
        '        Using DBCommand As SqlCommand = DBConn.CreateCommand()
        '            Delete(DBCommand, ProductID)
        '        End Using
        '    End Using

        'End Sub

        '''' <summary>
        '''' データベースのデータを削除する (Facade 専用)
        '''' </summary>
        '''' <param name="DBCommand">SqlCommand</param>
        '''' <param name="ProductID">ProductID</param>
        'Public Sub Delete(ByVal DBCommand As SqlCommand, _
        '                  ByVal ProductID As Integer)

        '    'データベースのデータを削除する SQL 文字列を生成する
        '    Dim Value As New StringBuilder()
        '    Value.AppendLine("DELETE FROM [Product]")
        '    Value.AppendLine("WHERE")
        '    Value.AppendLine("    [ProductID] = @ProductID")

        '    DBCommand.CommandText = Value.ToString()
        '    DBCommand.Parameters.Clear()
        '    DBCommand.Parameters.AddWithValue("ProductID", ProductID)
        '    DBCommand.ExecuteNonQuery()

        'End Sub

#End Region 'User-Defined Methods End

    End Class

    ''' <summary> 
    ''' Product リストクラス 
    ''' </summary> 
    Public Class ProductList
        Inherits List(Of Product)

#Region "User-Defined Constant of List"

#End Region 'User-Defined Constant of List End

        ''' <summary>
        ''' コンストラクタ
        ''' </summary>
        Public Sub New()

        End Sub

#Region "User-Defined Methods of List"

        '''' <summary>
        '''' データベースから全てのデータを読み込む
        '''' </summary>
        'Public Sub Load()

        '    'データベースから全てのデータを読み込む SQL 文字列を生成する
        '    Dim Value As New StringBuilder()
        '    Value.AppendLine("SELECT")
        '    Value.AppendLine("    [ProductID],")
        '    Value.AppendLine("    [ProductNumber],")
        '    Value.AppendLine("    [NumberType],")
        '    Value.AppendLine("    [Name],")
        '    Value.AppendLine("    [QuoName],")
        '    Value.AppendLine("    [JapaneseName],")
        '    Value.AppendLine("    [ChineseName],")
        '    Value.AppendLine("    [CASNumber],")
        '    Value.AppendLine("    [MolecularFormula],")
        '    Value.AppendLine("    [Status],")
        '    Value.AppendLine("    [ProposalDept],")
        '    Value.AppendLine("    [ProcumentDept],")
        '    Value.AppendLine("    [PD],")
        '    Value.AppendLine("    [Reference],")
        '    Value.AppendLine("    [Comment],")
        '    Value.AppendLine("    [CreatedBy],")
        '    Value.AppendLine("    [CreateDate],")
        '    Value.AppendLine("    [UpdatedBy],")
        '    Value.AppendLine("    [UpdateDate],")
        '    Value.AppendLine("    [ProductWarning],")
        '    Value.AppendLine("    [BUoM]")
        '    Value.AppendLine("FROM")
        '    Value.AppendLine("    [Product]")

        '    Using DBConn As New SqlConnection(DB_CONNECT_STRING)
        '        Using DBCommand As SqlCommand = DBConn.CreateCommand()
        '            DBCommand.CommandText = Value.ToString()
        '            DBConn.Open()
        '            Dim DBReader As SqlDataReader = DBCommand.ExecuteReader()
        '            While DBReader.Read()
        '                Dim dc_Product As New Product()
        '                SetProperty(DBReader("ProductID"), dc_Product.ProductID)
        '                SetProperty(DBReader("ProductNumber"), dc_Product.ProductNumber)
        '                SetProperty(DBReader("NumberType"), dc_Product.NumberType)
        '                SetProperty(DBReader("Name"), dc_Product.Name)
        '                SetProperty(DBReader("QuoName"), dc_Product.QuoName)
        '                SetProperty(DBReader("JapaneseName"), dc_Product.JapaneseName)
        '                SetProperty(DBReader("ChineseName"), dc_Product.ChineseName)
        '                SetProperty(DBReader("CASNumber"), dc_Product.CASNumber)
        '                SetProperty(DBReader("MolecularFormula"), dc_Product.MolecularFormula)
        '                SetProperty(DBReader("Status"), dc_Product.Status)
        '                SetProperty(DBReader("ProposalDept"), dc_Product.ProposalDept)
        '                SetProperty(DBReader("ProcumentDept"), dc_Product.ProcumentDept)
        '                SetProperty(DBReader("PD"), dc_Product.PD)
        '                SetProperty(DBReader("Reference"), dc_Product.Reference)
        '                SetProperty(DBReader("Comment"), dc_Product.Comment)
        '                SetProperty(DBReader("CreatedBy"), dc_Product.CreatedBy)
        '                SetProperty(DBReader("CreateDate"), dc_Product.CreateDate)
        '                SetProperty(DBReader("UpdatedBy"), dc_Product.UpdatedBy)
        '                SetProperty(DBReader("UpdateDate"), dc_Product.UpdateDate)
        '                SetProperty(DBReader("ProductWarning"), dc_Product.ProductWarning)
        '                SetProperty(DBReader("BUoM"), dc_Product.BUoM)
        '                Me.Add(dc_Product)
        '            End While
        '            DBReader.Close()
        '        End Using
        '    End Using

        'End Sub

#End Region 'User-Defined Methods of List End

    End Class

End Namespace
