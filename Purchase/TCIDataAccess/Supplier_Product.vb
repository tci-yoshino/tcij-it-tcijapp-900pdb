Option Explicit On
Option Infer Off
Option Strict On

Imports System.Text
Imports System.Data.SqlClient
Imports System.Text.RegularExpressions
Imports Purchase.TCIDataAccess.DBCommon
Imports Purchase.TCIDataAccess.Join

Namespace TCIDataAccess

    ''' <summary> 
    ''' Supplier_Product データクラス 
    ''' </summary> 
    ''' <remarks>
    ''' <para>Generated by データクラス自動生成ツール Ver 4.1</para>
    ''' </remarks>
    Public Class Supplier_Product


#Region "User-Defined Constant"

#End Region 'User-Defined Constant End

        Protected _SupplierCode As Integer = 0
        Protected _ProductID As Integer = 0
        Protected _SupplierItemNumber As String = String.Empty
        Protected _Note As String = String.Empty
        Protected _CreatedBy As Integer = 0
        Protected _CreateDate As DateTime = New DateTime(0)
        Protected _UpdatedBy As Integer = 0
        Protected _UpdateDate As DateTime = New DateTime(0)
        Protected _ValidQuotation As String = String.Empty

        ''' <summary> 
        ''' SupplierCode を設定、または取得する 
        ''' </summary> 
        Public Property SupplierCode() As Integer
            Get
                Return _SupplierCode
            End Get
            Set(ByVal value As Integer)
                _SupplierCode = value
            End Set
        End Property

        ''' <summary> 
        ''' ProductID を設定、または取得する 
        ''' </summary> 
        Public Property ProductID() As Integer
            Get
                Return _ProductID
            End Get
            Set(ByVal value As Integer)
                _ProductID = value
            End Set
        End Property

        ''' <summary> 
        ''' SupplierItemNumber を設定、または取得する 
        ''' </summary> 
        Public Property SupplierItemNumber() As String
            Get
                Return _SupplierItemNumber
            End Get
            Set(ByVal value As String)
                _SupplierItemNumber = value
            End Set
        End Property

        ''' <summary> 
        ''' Note を設定、または取得する 
        ''' </summary> 
        Public Property Note() As String
            Get
                Return _Note
            End Get
            Set(ByVal value As String)
                _Note = value
            End Set
        End Property

        ''' <summary> 
        ''' CreatedBy を設定、または取得する 
        ''' </summary> 
        Public Property CreatedBy() As Integer
            Get
                Return _CreatedBy
            End Get
            Set(ByVal value As Integer)
                _CreatedBy = value
            End Set
        End Property

        ''' <summary> 
        ''' CreateDate を設定、または取得する 
        ''' </summary> 
        Public Property CreateDate() As DateTime
            Get
                Return _CreateDate
            End Get
            Set(ByVal value As DateTime)
                _CreateDate = value
            End Set
        End Property

        ''' <summary> 
        ''' UpdatedBy を設定、または取得する 
        ''' </summary> 
        Public Property UpdatedBy() As Integer
            Get
                Return _UpdatedBy
            End Get
            Set(ByVal value As Integer)
                _UpdatedBy = value
            End Set
        End Property

        ''' <summary> 
        ''' UpdateDate を設定、または取得する 
        ''' </summary> 
        Public Property UpdateDate() As DateTime
            Get
                Return _UpdateDate
            End Get
            Set(ByVal value As DateTime)
                _UpdateDate = value
            End Set
        End Property

        ''' <summary> 
        ''' ValidQuotation を設定、または取得する 
        ''' </summary> 
        Public Property ValidQuotation() As String
            Get
                Return _ValidQuotation
            End Get
            Set(ByVal value As String)
                _ValidQuotation = value
            End Set
        End Property

        ''' <summary> 
        ''' コンストラクタ
        ''' </summary> 
        Public Sub New()

        End Sub

        ''' <summary>
        ''' データベースからデータを読み込む。
        ''' </summary>
        ''' <param name="SupplierCode">SupplierCode</param>
        ''' <param name="ProductID">ProductID</param>
        Public Sub Load(ByVal SupplierCode As Integer, _
                        ByVal ProductID As Integer)

            'データベースからデータを読み込む SQL 文字列を生成する。
            Dim Value As New StringBuilder()
            Value.AppendLine("SELECT")
            Value.AppendLine("    [SupplierCode],")
            Value.AppendLine("    [ProductID],")
            Value.AppendLine("    [SupplierItemNumber],")
            Value.AppendLine("    [Note],")
            Value.AppendLine("    [CreatedBy],")
            Value.AppendLine("    [CreateDate],")
            Value.AppendLine("    [UpdatedBy],")
            Value.AppendLine("    [UpdateDate],")
            Value.AppendLine("    [ValidQuotation]")
            Value.AppendLine("FROM")
            Value.AppendLine("    [Supplier_Product]")
            Value.AppendLine("WHERE")
            Value.AppendLine("    [SupplierCode] = @SupplierCode")
            Value.AppendLine("    AND [ProductID] = @ProductID")

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    DBCommand.CommandText = Value.ToString()
                    DBCommand.Parameters.AddWithValue("SupplierCode", SupplierCode)
                    DBCommand.Parameters.AddWithValue("ProductID", ProductID)
                    DBConn.Open()
                    Dim DBReader As SqlDataReader = DBCommand.ExecuteReader()
                    While DBReader.Read()
                        SetProperty(DBReader("SupplierCode"), _SupplierCode)
                        SetProperty(DBReader("ProductID"), _ProductID)
                        SetProperty(DBReader("SupplierItemNumber"), _SupplierItemNumber)
                        SetProperty(DBReader("Note"), _Note)
                        SetProperty(DBReader("CreatedBy"), _CreatedBy)
                        SetProperty(DBReader("CreateDate"), _CreateDate)
                        SetProperty(DBReader("UpdatedBy"), _UpdatedBy)
                        SetProperty(DBReader("UpdateDate"), _UpdateDate)
                        SetProperty(DBReader("ValidQuotation"), _ValidQuotation)
                    End While
                    DBReader.Close()
                End Using
            End Using

        End Sub

        ''' <summary> 
        ''' データベースへデータを書き込む。
        ''' </summary> 
        ''' <returns>IDENTITY で自動的に挿入された ID 値。更新または IDENTITY 列が無い場合は 0 が返る。</returns> 
        Public Function Save() As Integer

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                DBConn.Open()
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    Dim i_Identity As Integer = Me.Save(DBCommand)
                    Return i_Identity
                End Using
            End Using

        End Function

        ''' <summary> 
        ''' データベースへデータを書き込む。(Facade 専用)
        ''' </summary> 
        ''' <param name="DBCommand">SqlCommand</param>
        ''' <returns>IDENTITY で自動的に挿入された ID 値。更新または IDENTITY 列が無い場合は 0 が返る。</returns> 
        Public Function Save(ByVal DBCommand As SqlCommand) As Integer

            Dim i_ID As Integer = 0
            DBCommand.CommandText = CreateSaveSQL()
            DBCommand.Parameters.Clear()
            DBCommand.Parameters.AddWithValue("SupplierCode", _SupplierCode)
            DBCommand.Parameters.AddWithValue("ProductID", _ProductID)
            DBCommand.Parameters.AddWithValue("SupplierItemNumber", ConvertEmptyStringToNull(_SupplierItemNumber))
            DBCommand.Parameters.AddWithValue("Note", ConvertEmptyStringToNull(_Note))
            DBCommand.Parameters.AddWithValue("CreatedBy", _CreatedBy)
            DBCommand.Parameters.AddWithValue("UpdatedBy", _UpdatedBy)
            DBCommand.Parameters.AddWithValue("ValidQuotation", ConvertEmptyStringToNull(_ValidQuotation))
            Dim ob_ID As Object = DBCommand.ExecuteScalar()
            If Not IsDBNull(ob_ID) Then
                i_ID = CInt(ob_ID)
            End If
            Return i_ID

        End Function

        ''' <summary> 
        ''' データベースへデータを書き込む SQL 文字列を生成する。
        ''' </summary> 
        ''' <returns>生成した SQL 文字列</returns> 
        Private Function CreateSaveSQL() As String

            Dim Value As New StringBuilder()
            Value.AppendLine("IF(")
            Value.AppendLine("    SELECT")
            Value.AppendLine("        COUNT(*)")
            Value.AppendLine("    FROM")
            Value.AppendLine("        [Supplier_Product]")
            Value.AppendLine("    WHERE")
            Value.AppendLine("        [SupplierCode] = @SupplierCode")
            Value.AppendLine("        AND [ProductID] = @ProductID")
            Value.AppendLine("    ) = 0")
            Value.AppendLine("        INSERT [Supplier_Product] (")
            Value.AppendLine("            [SupplierCode],")
            Value.AppendLine("            [ProductID],")
            Value.AppendLine("            [SupplierItemNumber],")
            Value.AppendLine("            [Note],")
            Value.AppendLine("            [CreatedBy],")
            Value.AppendLine("            [CreateDate],")
            Value.AppendLine("            [UpdatedBy],")
            Value.AppendLine("            [UpdateDate],")
            Value.AppendLine("            [ValidQuotation]")
            Value.AppendLine("        )")
            Value.AppendLine("        Values(")
            Value.AppendLine("            @SupplierCode,")
            Value.AppendLine("            @ProductID,")
            Value.AppendLine("            @SupplierItemNumber,")
            Value.AppendLine("            @Note,")
            Value.AppendLine("            @CreatedBy,")
            Value.AppendLine("            GETDATE(),")
            Value.AppendLine("            @UpdatedBy,")
            Value.AppendLine("            GETDATE(),")
            Value.AppendLine("            @ValidQuotation")
            Value.AppendLine("        )")
            Value.AppendLine("    ELSE")
            Value.AppendLine("        UPDATE")
            Value.AppendLine("            [Supplier_Product]")
            Value.AppendLine("        SET")
            Value.AppendLine("            [SupplierCode] = @SupplierCode,")
            Value.AppendLine("            [ProductID] = @ProductID,")
            Value.AppendLine("            [SupplierItemNumber] = @SupplierItemNumber,")
            Value.AppendLine("            [Note] = @Note,")
            Value.AppendLine("            [UpdatedBy] = @UpdatedBy,")
            Value.AppendLine("            [UpdateDate] = GETDATE(),")
            Value.AppendLine("            [ValidQuotation] = @ValidQuotation")
            Value.AppendLine("        WHERE ")
            Value.AppendLine("            [SupplierCode] = @SupplierCode")
            Value.AppendLine("            AND [ProductID] = @ProductID")
            Value.AppendLine(";")
            Value.AppendLine("SELECT SCOPE_IDENTITY();")
            Return Value.ToString()

        End Function

        ''' <summary> 
        ''' データの存在チェックを行う。
        ''' </summary> 
        ''' <returns>存在する場合は True、しない場合は False を返す</returns> 
        ''' <param name="SupplierCode">SupplierCode</param>
        ''' <param name="ProductID">ProductID</param>
        Public Shared Function IsExists(ByVal SupplierCode As Integer, _
                                        ByVal ProductID As Integer) As Boolean

            ' データの存在チェックを行う SQL 文字列を生成する。
            Dim Value As New StringBuilder()
            Value.AppendLine("SELECT")
            Value.AppendLine("    COUNT(*)")
            Value.AppendLine("FROM")
            Value.AppendLine("    [Supplier_Product]")
            Value.AppendLine("WHERE")
            Value.AppendLine("    [SupplierCode] = @SupplierCode")
            Value.AppendLine("    AND [ProductID] = @ProductID")

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    DBCommand.CommandText = Value.ToString()
                    DBCommand.Parameters.Clear()
                    DBCommand.Parameters.AddWithValue("SupplierCode", SupplierCode)
                    DBCommand.Parameters.AddWithValue("ProductID", ProductID)
                    DBConn.Open()
                    Dim i_Count As Integer = Convert.ToInt32(DBCommand.ExecuteScalar())
                    Return i_Count > 0
                End Using
            End Using

        End Function

#Region "User-Defined Methods"

        '''' <summary>
        '''' データベースのデータを削除する
        '''' </summary>
        '''' <param name="SupplierCode">SupplierCode</param>
        '''' <param name="ProductID">ProductID</param>
        Public Sub Delete(ByVal SupplierCode As Integer,
                          ByVal ProductID As Integer)

            Using DBConn As New SqlConnection(DB_CONNECT_STRING)
                DBConn.Open()
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    Delete(DBCommand, SupplierCode, ProductID)
                End Using
            End Using

        End Sub

        '''' <summary>
        '''' データベースのデータを削除する (Facade 専用)
        '''' </summary>
        '''' <param name="DBCommand">SqlCommand</param>
        '''' <param name="SupplierCode">SupplierCode</param>
        '''' <param name="ProductID">ProductID</param>
        Public Sub Delete(ByVal DBCommand As SqlCommand,
                          ByVal SupplierCode As Integer,
                          ByVal ProductID As Integer)

            'データベースのデータを削除する SQL 文字列を生成する
            Dim Value As New StringBuilder()
            Value.AppendLine("DELETE FROM [Supplier_Product]")
            Value.AppendLine("WHERE")
            Value.AppendLine("    [SupplierCode] = @SupplierCode")
            Value.AppendLine("    AND [ProductID] = @ProductID")

            DBCommand.CommandText = Value.ToString()
            DBCommand.Parameters.Clear()
            DBCommand.Parameters.AddWithValue("SupplierCode", SupplierCode)
            DBCommand.Parameters.AddWithValue("ProductID", ProductID)
            DBCommand.ExecuteNonQuery()

        End Sub

        Public Function GetProductListBySupplierList(ByVal st_SupplierCode As String, ByVal st_RoleCode As String, ByVal st_ValidFilter As String, _
                                                     ByVal st_SupplierProductListID As String, ByVal st_HiddenSortField As String, ByVal st_HiddenSortType As String) _
                                                     As List(Of ProductListBySupplierDisp)
            Dim productListBySupplierList As List(Of ProductListBySupplierDisp) = New List(Of ProductListBySupplierDisp)

            Dim sb_SQL As StringBuilder = New StringBuilder

            sb_SQL.AppendLine("SELECT")
            sb_SQL.AppendLine("  P.[ProductID], ")
            sb_SQL.AppendLine("  P.[CASNumber], ")
            sb_SQL.AppendLine("  P.[ProductNumber], ")
            sb_SQL.AppendLine("  P.[NumberType], ")
            sb_SQL.AppendLine("  CASE WHEN NOT P.[QuoName] IS NULL THEN P.[QuoName] ELSE P.[Name] END AS ProductName, ")
            sb_SQL.AppendLine("  SP.[SupplierItemNumber], ")
            sb_SQL.AppendLine("  SP.[Note], ")
            sb_SQL.AppendLine("  CASE WHEN RH.[ValidQuotation] = 0 THEN 'Y' WHEN RH.[ValidQuotation] = 1 THEN 'N' ELSE '' END AS ValidQuotation, ")
            sb_SQL.AppendLine("  SP.[UpdateDate], ")
            sb_SQL.AppendLine("  CONCAT('./SuppliersProductSetting.aspx?Action=Edit&Supplier=', @SupplierCode, '&Product=', RTRIM(LTRIM(STR(P.[ProductID])))) AS Url, ")
            sb_SQL.AppendLine("  ISNULL(C.[isCONFIDENTIAL], 0) AS isCONFIDENTIAL ")

            sb_SQL.AppendLine("FROM")
            sb_SQL.AppendLine("  [Supplier_Product] AS SP")
            sb_SQL.AppendLine("    LEFT OUTER JOIN [Product] AS P ON SP.[ProductID] = P.[ProductID] ")
            sb_SQL.AppendLine("    LEFT OUTER JOIN [v_CONFIDENTIAL] AS C ON C.[ProductID] = SP.[ProductID]")
            sb_SQL.AppendLine("    LEFT OUTER JOIN [v_RFQHeader] AS RH ON SP.[SupplierCode] = RH.[SupplierCode] And SP.[ProductID] = RH.[ProductID] ")

            sb_SQL.AppendLine("WHERE ")
            sb_SQL.AppendLine("  SP.[SupplierCode] = @SupplierCode ")

            '権限ロールに従い極秘品を除外する
            If Common.CheckSessionRole(st_RoleCode) = False Then
                sb_SQL.AppendLine("  AND C.[isCONFIDENTIAL] = 0 ")
            End If

            If StringValidator.Equals(st_ValidFilter, Common.VALID_FILTER_VALID) Then
                sb_SQL.AppendLine("  AND [ValidQuotation] = 'Y'")
            ElseIf StringValidator.Equals(st_ValidFilter, Common.VALID_FILTER_INVALID) Then
                sb_SQL.AppendLine("  AND [ValidQuotation] = 'N'")
            End If

            'ProductType、Productnumberでのソート（ListView内のテーブル要素内thのID取得時に、ASPXの仕様上自動で”Listview.ID+要素のID”となるのでListViewのIDも記載）
            If String.Equals(st_HiddenSortField, st_SupplierProductListID + "_" + "ProductNumHeader") Or
                String.IsNullOrEmpty(st_HiddenSortField) Then

                If st_HiddenSortType = "asc" Then
                    sb_SQL.AppendLine("ORDER BY ")
                    sb_SQL.AppendLine("  CASE ")
                    sb_SQL.AppendLine("    WHEN P.[NumberType] = 'CAS' THEN 1 ")
                    sb_SQL.AppendLine("    WHEN P.[NumberType] = 'NEW' THEN 2 ")
                    sb_SQL.AppendLine("    ELSE 3 ")
                    sb_SQL.AppendLine("  END, ")
                    sb_SQL.AppendLine("  P.[ProductNumber] ASC ")
                ElseIf st_HiddenSortType = "desc" Then
                    sb_SQL.AppendLine("ORDER BY ")
                    sb_SQL.AppendLine("  CASE ")
                    sb_SQL.AppendLine("    WHEN P.[NumberType] = 'TCI' THEN 1 ")
                    sb_SQL.AppendLine("    WHEN P.[NumberType] = 'NEW' THEN 2 ")
                    sb_SQL.AppendLine("    ELSE 3 ")
                    sb_SQL.AppendLine("  END, ")
                    sb_SQL.AppendLine("  P.[ProductNumber] DESC ")
                Else
                    sb_SQL.AppendLine("ORDER BY ")
                    sb_SQL.AppendLine("  CASE ")
                    sb_SQL.AppendLine("    WHEN P.[NumberType] = 'CAS' THEN 1 ")
                    sb_SQL.AppendLine("    WHEN P.[NumberType] = 'NEW' THEN 2 ")
                    sb_SQL.AppendLine("    ELSE 3 ")
                    sb_SQL.AppendLine("  END, ")
                    sb_SQL.AppendLine("  P.[ProductNumber] ASC ")
                End If

                'UpdateDateでのソート
            ElseIf String.Equals(st_HiddenSortField, st_SupplierProductListID + "_" + "UpdateDateHeader") Then
                sb_SQL.AppendLine("ORDER BY ")
                sb_SQL.AppendLine("  SP.[UpdateDate] ")
                If st_HiddenSortType = "asc" Then
                    sb_SQL.AppendLine(" ASC ")
                ElseIf st_HiddenSortType = "desc" Then
                    sb_SQL.AppendLine(" DESC ")
                Else
                    sb_SQL.AppendLine(" ASC ")
                End If

                'ValidQuotationでのソート
            ElseIf String.Equals(st_HiddenSortField, st_SupplierProductListID + "_" + "ValidQuotationHeader") Then

                If st_HiddenSortType = "asc" Then
                    sb_SQL.AppendLine("ORDER BY ")
                    sb_SQL.AppendLine("  CASE ")
                    sb_SQL.AppendLine("    WHEN RH.[Validquotation] = 'Y' THEN 3 ")
                    sb_SQL.AppendLine("    WHEN RH.[Validquotation] = 'N' THEN 2 ")
                    sb_SQL.AppendLine("    ELSE 1 ")
                    sb_SQL.AppendLine("  END ")
                ElseIf st_HiddenSortType = "desc" Then
                    sb_SQL.AppendLine("ORDER BY ")
                    sb_SQL.AppendLine("  CASE ")
                    sb_SQL.AppendLine("    WHEN RH.[Validquotation] = 'Y' THEN 1 ")
                    sb_SQL.AppendLine("    WHEN RH.[Validquotation] = 'N' THEN 2 ")
                    sb_SQL.AppendLine("    ELSE 3 ")
                    sb_SQL.AppendLine("  END ")
                Else
                    sb_SQL.AppendLine("ORDER BY ")
                    sb_SQL.AppendLine("  CASE ")
                    sb_SQL.AppendLine("    WHEN RH.[Validquotation] = 'Y' THEN 3 ")
                    sb_SQL.AppendLine("    WHEN RH.[Validquotation] = 'N' THEN 2 ")
                    sb_SQL.AppendLine("    ELSE 1 ")
                    sb_SQL.AppendLine("  END ")
                End If
            End If

            Using DBConn As New SqlConnection(Common.DB_CONNECT_STRING)
                Using DBCommand As SqlCommand = DBConn.CreateCommand()
                    DBCommand.Parameters.Clear()
                    DBCommand.Parameters.AddWithValue("SupplierCode", CInt(st_SupplierCode))
                    DBCommand.CommandText = sb_SQL.ToString()

                    ' 実行
                    DBConn.Open()
                    Dim DBReader As SqlDataReader = DBCommand.ExecuteReader()

                    While DBReader.Read

                        Dim dc_ProductListBySupplierDisp As ProductListBySupplierDisp = New ProductListBySupplierDisp

                        DBCommon.SetProperty(DBReader("ProductNumber"), dc_ProductListBySupplierDisp.ProductNumber)
                        DBCommon.SetProperty(DBReader("CASNumber"), dc_ProductListBySupplierDisp.CASNumber)
                        DBCommon.SetProperty(DBReader("ProductName"), dc_ProductListBySupplierDisp.ProductName)
                        DBCommon.SetProperty(DBReader("SupplierItemNumber"), dc_ProductListBySupplierDisp.SupplierItemNumber)
                        DBCommon.SetProperty(DBReader("Note"), dc_ProductListBySupplierDisp.Note)
                        DBCommon.SetProperty(DBReader("ValidQuotation"), dc_ProductListBySupplierDisp.ValidQuotation)
                        DBCommon.SetProperty(DBReader("UpdateDate"), dc_ProductListBySupplierDisp.UpdateDate)
                        DBCommon.SetProperty(DBReader("Url"), dc_ProductListBySupplierDisp.Url)
                        DBCommon.SetProperty(DBReader("ProductID"), dc_ProductListBySupplierDisp.ProductID)

                        'DBCommon.SetProperty(DBReader("NumberType"), dc_ProductListBySupplierDisp.NumberType)
                        'DBCommon.SetProperty(DBReader("isCONFIDENTIAL"), dc_ProductListBySupplierDisp.isCONFIDENTIAL)

                        productListBySupplierList.Add(dc_ProductListBySupplierDisp)

                    End While

                    DBConn.Close

                End Using
            End Using

            Return productListBySupplierList
        End Function

#End Region 'User-Defined Methods End

    End Class

    ''' <summary> 
    ''' Supplier_Product リストクラス 
    ''' </summary> 
    Public Class Supplier_ProductList
        Inherits List(Of Supplier_Product)

#Region "User-Defined Constant of List"

#End Region 'User-Defined Constant of List End

        ''' <summary>
        ''' コンストラクタ
        ''' </summary>
        Public Sub New()

        End Sub

#Region "User-Defined Methods of List"

        '''' <summary>
        '''' データベースから全てのデータを読み込む
        '''' </summary>
        'Public Sub Load()

        '    'データベースから全てのデータを読み込む SQL 文字列を生成する
        '    Dim Value As New StringBuilder()
        '    Value.AppendLine("SELECT")
        '    Value.AppendLine("    [SupplierCode],")
        '    Value.AppendLine("    [ProductID],")
        '    Value.AppendLine("    [SupplierItemNumber],")
        '    Value.AppendLine("    [Note],")
        '    Value.AppendLine("    [CreatedBy],")
        '    Value.AppendLine("    [CreateDate],")
        '    Value.AppendLine("    [UpdatedBy],")
        '    Value.AppendLine("    [UpdateDate]")
        '    Value.AppendLine("FROM")
        '    Value.AppendLine("    [Supplier_Product]")

        '    Using DBConn As New SqlConnection(DB_CONNECT_STRING)
        '        Using DBCommand As SqlCommand = DBConn.CreateCommand()
        '            DBCommand.CommandText = Value.ToString()
        '            DBConn.Open()
        '            Dim DBReader As SqlDataReader = DBCommand.ExecuteReader()
        '            While DBReader.Read()
        '                Dim dc_Supplier_Product As New Supplier_Product()
        '                SetProperty(DBReader("SupplierCode"), dc_Supplier_Product.SupplierCode)
        '                SetProperty(DBReader("ProductID"), dc_Supplier_Product.ProductID)
        '                SetProperty(DBReader("SupplierItemNumber"), dc_Supplier_Product.SupplierItemNumber)
        '                SetProperty(DBReader("Note"), dc_Supplier_Product.Note)
        '                SetProperty(DBReader("CreatedBy"), dc_Supplier_Product.CreatedBy)
        '                SetProperty(DBReader("CreateDate"), dc_Supplier_Product.CreateDate)
        '                SetProperty(DBReader("UpdatedBy"), dc_Supplier_Product.UpdatedBy)
        '                SetProperty(DBReader("UpdateDate"), dc_Supplier_Product.UpdateDate)
        '                Me.Add(dc_Supplier_Product)
        '            End While
        '            DBReader.Close()
        '        End Using
        '    End Using

        'End Sub

#End Region 'User-Defined Methods of List End

    End Class

End Namespace